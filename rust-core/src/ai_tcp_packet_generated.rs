// automatically generated by the FlatBuffers compiler, do not modify


// @generated


extern crate flatbuffers;

#[allow(unused_imports, dead_code)]
pub mod aitcp {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum AITcpPacketOffset {}
#[derive(Copy, Clone, PartialEq)]

/// AI-TCP Binary Packet Schema
/// Fully encrypted. VoV log captures UUID, timestamp, hash externally.
pub struct AITcpPacket<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AITcpPacket<'a> {
  type Inner = AITcpPacket<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AITcpPacket<'a> {
  pub const VT_VERSION: flatbuffers::VOffsetT = 4;
  pub const VT_EPHEMERAL_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_NONCE: flatbuffers::VOffsetT = 8;
  pub const VT_ENCRYPTED_SEQUENCE_ID: flatbuffers::VOffsetT = 10;
  pub const VT_ENCRYPTED_PAYLOAD: flatbuffers::VOffsetT = 12;
  pub const VT_SIGNATURE: flatbuffers::VOffsetT = 14;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AITcpPacket { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AITcpPacketArgs<'args>
  ) -> flatbuffers::WIPOffset<AITcpPacket<'bldr>> {
    let mut builder = AITcpPacketBuilder::new(_fbb);
    if let Some(x) = args.signature { builder.add_signature(x); }
    if let Some(x) = args.encrypted_payload { builder.add_encrypted_payload(x); }
    if let Some(x) = args.encrypted_sequence_id { builder.add_encrypted_sequence_id(x); }
    if let Some(x) = args.nonce { builder.add_nonce(x); }
    if let Some(x) = args.ephemeral_key { builder.add_ephemeral_key(x); }
    builder.add_version(args.version);
    builder.finish()
  }


  #[inline]
  pub fn version(&self) -> u8 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u8>(AITcpPacket::VT_VERSION, Some(0)).unwrap()}
  }
  #[inline]
  pub fn ephemeral_key(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AITcpPacket::VT_EPHEMERAL_KEY, None).unwrap()}
  }
  #[inline]
  pub fn nonce(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AITcpPacket::VT_NONCE, None).unwrap()}
  }
  #[inline]
  pub fn encrypted_sequence_id(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AITcpPacket::VT_ENCRYPTED_SEQUENCE_ID, None).unwrap()}
  }
  #[inline]
  pub fn encrypted_payload(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AITcpPacket::VT_ENCRYPTED_PAYLOAD, None).unwrap()}
  }
  #[inline]
  pub fn signature(&self) -> flatbuffers::Vector<'a, u8> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(AITcpPacket::VT_SIGNATURE, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for AITcpPacket<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<u8>("version", Self::VT_VERSION, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("ephemeral_key", Self::VT_EPHEMERAL_KEY, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("nonce", Self::VT_NONCE, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("encrypted_sequence_id", Self::VT_ENCRYPTED_SEQUENCE_ID, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("encrypted_payload", Self::VT_ENCRYPTED_PAYLOAD, true)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("signature", Self::VT_SIGNATURE, true)?
     .finish();
    Ok(())
  }
}
pub struct AITcpPacketArgs<'a> {
    pub version: u8,
    pub ephemeral_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub nonce: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub encrypted_sequence_id: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub encrypted_payload: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub signature: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
}
impl<'a> Default for AITcpPacketArgs<'a> {
  #[inline]
  fn default() -> Self {
    AITcpPacketArgs {
      version: 0,
      ephemeral_key: None, // required field
      nonce: None, // required field
      encrypted_sequence_id: None, // required field
      encrypted_payload: None, // required field
      signature: None, // required field
    }
  }
}

pub struct AITcpPacketBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AITcpPacketBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_version(&mut self, version: u8) {
    self.fbb_.push_slot::<u8>(AITcpPacket::VT_VERSION, version, 0);
  }
  #[inline]
  pub fn add_ephemeral_key(&mut self, ephemeral_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AITcpPacket::VT_EPHEMERAL_KEY, ephemeral_key);
  }
  #[inline]
  pub fn add_nonce(&mut self, nonce: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AITcpPacket::VT_NONCE, nonce);
  }
  #[inline]
  pub fn add_encrypted_sequence_id(&mut self, encrypted_sequence_id: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AITcpPacket::VT_ENCRYPTED_SEQUENCE_ID, encrypted_sequence_id);
  }
  #[inline]
  pub fn add_encrypted_payload(&mut self, encrypted_payload: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AITcpPacket::VT_ENCRYPTED_PAYLOAD, encrypted_payload);
  }
  #[inline]
  pub fn add_signature(&mut self, signature: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AITcpPacket::VT_SIGNATURE, signature);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AITcpPacketBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AITcpPacketBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AITcpPacket<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, AITcpPacket::VT_EPHEMERAL_KEY,"ephemeral_key");
    self.fbb_.required(o, AITcpPacket::VT_NONCE,"nonce");
    self.fbb_.required(o, AITcpPacket::VT_ENCRYPTED_SEQUENCE_ID,"encrypted_sequence_id");
    self.fbb_.required(o, AITcpPacket::VT_ENCRYPTED_PAYLOAD,"encrypted_payload");
    self.fbb_.required(o, AITcpPacket::VT_SIGNATURE,"signature");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AITcpPacket<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AITcpPacket");
      ds.field("version", &self.version());
      ds.field("ephemeral_key", &self.ephemeral_key());
      ds.field("nonce", &self.nonce());
      ds.field("encrypted_sequence_id", &self.encrypted_sequence_id());
      ds.field("encrypted_payload", &self.encrypted_payload());
      ds.field("signature", &self.signature());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `AITcpPacket`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aitcp_packet_unchecked`.
pub fn root_as_aitcp_packet(buf: &[u8]) -> Result<AITcpPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<AITcpPacket>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `AITcpPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_aitcp_packet_unchecked`.
pub fn size_prefixed_root_as_aitcp_packet(buf: &[u8]) -> Result<AITcpPacket, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<AITcpPacket>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `AITcpPacket` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aitcp_packet_unchecked`.
pub fn root_as_aitcp_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AITcpPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<AITcpPacket<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `AITcpPacket` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_aitcp_packet_unchecked`.
pub fn size_prefixed_root_as_aitcp_packet_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<AITcpPacket<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<AITcpPacket<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a AITcpPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `AITcpPacket`.
pub unsafe fn root_as_aitcp_packet_unchecked(buf: &[u8]) -> AITcpPacket {
  flatbuffers::root_unchecked::<AITcpPacket>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed AITcpPacket and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `AITcpPacket`.
pub unsafe fn size_prefixed_root_as_aitcp_packet_unchecked(buf: &[u8]) -> AITcpPacket {
  flatbuffers::size_prefixed_root_unchecked::<AITcpPacket>(buf)
}
#[inline]
pub fn finish_aitcp_packet_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<AITcpPacket<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_aitcp_packet_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<AITcpPacket<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod AITCP

