// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod aitcp {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

pub enum EphemeralSessionOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct EphemeralSession<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for EphemeralSession<'a> {
  type Inner = EphemeralSession<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> EphemeralSession<'a> {
  pub const VT_SESSION_ID: flatbuffers::VOffsetT = 4;
  pub const VT_PUBLIC_KEY: flatbuffers::VOffsetT = 6;
  pub const VT_EXPIRATION_UNIX: flatbuffers::VOffsetT = 8;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    EphemeralSession { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args EphemeralSessionArgs<'args>
  ) -> flatbuffers::WIPOffset<EphemeralSession<'bldr>> {
    let mut builder = EphemeralSessionBuilder::new(_fbb);
    builder.add_expiration_unix(args.expiration_unix);
    if let Some(x) = args.public_key { builder.add_public_key(x); }
    if let Some(x) = args.session_id { builder.add_session_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn session_id(&self) -> Option<&'a str> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(EphemeralSession::VT_SESSION_ID, None)}
  }
  #[inline]
  pub fn public_key(&self) -> Option<flatbuffers::Vector<'a, u8>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(EphemeralSession::VT_PUBLIC_KEY, None)}
  }
  #[inline]
  pub fn expiration_unix(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(EphemeralSession::VT_EXPIRATION_UNIX, Some(0)).unwrap()}
  }
}

impl flatbuffers::Verifiable for EphemeralSession<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("session_id", Self::VT_SESSION_ID, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, u8>>>("public_key", Self::VT_PUBLIC_KEY, false)?
     .visit_field::<i64>("expiration_unix", Self::VT_EXPIRATION_UNIX, false)?
     .finish();
    Ok(())
  }
}
pub struct EphemeralSessionArgs<'a> {
    pub session_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub public_key: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, u8>>>,
    pub expiration_unix: i64,
}
impl<'a> Default for EphemeralSessionArgs<'a> {
  #[inline]
  fn default() -> Self {
    EphemeralSessionArgs {
      session_id: None,
      public_key: None,
      expiration_unix: 0,
    }
  }
}

pub struct EphemeralSessionBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> EphemeralSessionBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_session_id(&mut self, session_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EphemeralSession::VT_SESSION_ID, session_id);
  }
  #[inline]
  pub fn add_public_key(&mut self, public_key: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(EphemeralSession::VT_PUBLIC_KEY, public_key);
  }
  #[inline]
  pub fn add_expiration_unix(&mut self, expiration_unix: i64) {
    self.fbb_.push_slot::<i64>(EphemeralSession::VT_EXPIRATION_UNIX, expiration_unix, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> EphemeralSessionBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    EphemeralSessionBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<EphemeralSession<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for EphemeralSession<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("EphemeralSession");
      ds.field("session_id", &self.session_id());
      ds.field("public_key", &self.public_key());
      ds.field("expiration_unix", &self.expiration_unix());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `EphemeralSession`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ephemeral_session_unchecked`.
pub fn root_as_ephemeral_session(buf: &[u8]) -> Result<EphemeralSession, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<EphemeralSession>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `EphemeralSession` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_ephemeral_session_unchecked`.
pub fn size_prefixed_root_as_ephemeral_session(buf: &[u8]) -> Result<EphemeralSession, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<EphemeralSession>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `EphemeralSession` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ephemeral_session_unchecked`.
pub fn root_as_ephemeral_session_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EphemeralSession<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<EphemeralSession<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `EphemeralSession` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_ephemeral_session_unchecked`.
pub fn size_prefixed_root_as_ephemeral_session_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<EphemeralSession<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<EphemeralSession<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a EphemeralSession and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `EphemeralSession`.
pub unsafe fn root_as_ephemeral_session_unchecked(buf: &[u8]) -> EphemeralSession {
  flatbuffers::root_unchecked::<EphemeralSession>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed EphemeralSession and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `EphemeralSession`.
pub unsafe fn size_prefixed_root_as_ephemeral_session_unchecked(buf: &[u8]) -> EphemeralSession {
  flatbuffers::size_prefixed_root_unchecked::<EphemeralSession>(buf)
}
#[inline]
pub fn finish_ephemeral_session_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<EphemeralSession<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_ephemeral_session_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<EphemeralSession<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod aitcp

